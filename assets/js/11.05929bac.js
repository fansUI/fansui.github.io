(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{374:function(e,t,r){"use strict";r.r(t);var a=r(42),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h2",{attrs:{id:"学习网址"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#学习网址"}},[e._v("#")]),e._v(" 学习网址")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://astexplorer.net/",target:"_blank",rel:"noopener noreferrer"}},[e._v("在线解析"),r("OutboundLink")],1),e._v(" "),r("br"),e._v(" "),r("a",{attrs:{href:"https://zhangchi.blog.csdn.net/article/details/112552669?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control",target:"_blank",rel:"noopener noreferrer"}},[e._v("AST 入门必知必会"),r("OutboundLink")],1),e._v(" "),r("br"),e._v(" "),r("a",{attrs:{href:"https://github.com/NightTeam/JavaScriptAST",target:"_blank",rel:"noopener noreferrer"}},[e._v("参考文章"),r("OutboundLink")],1),e._v(" "),r("br"),e._v(" "),r("a",{attrs:{href:"https://github.com/jamiebuilds/babel-handbook/tree/master/translations/zh-Hans",target:"_blank",rel:"noopener noreferrer"}},[e._v("babel插件开发"),r("OutboundLink")],1)]),e._v(" "),r("h2",{attrs:{id:"什么是抽象语法树"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#什么是抽象语法树"}},[e._v("#")]),e._v(" 什么是抽象语法树？")]),e._v(" "),r("p",[e._v("把js代码转换成树状结构，然后进行一系列处理，再次转化成js代码，js执行流程和执行结果与原js代码保持一致")]),e._v(" "),r("h2",{attrs:{id:"抽象语法树有什么用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#抽象语法树有什么用"}},[e._v("#")]),e._v(" 抽象语法树有什么用？")]),e._v(" "),r("ol",[r("li",[e._v("用来去除注释")]),e._v(" "),r("li",[e._v("用来去除空格")]),e._v(" "),r("li",[e._v("用来压缩 js 代码")]),e._v(" "),r("li",[e._v("用来代码转换 "),r("br"),e._v("\n......")])]),e._v(" "),r("h2",{attrs:{id:"js-混淆模板"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#js-混淆模板"}},[e._v("#")]),e._v(" js 混淆模板")]),e._v(" "),r("h3",{attrs:{id:"创建项目"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#创建项目"}},[e._v("#")]),e._v(" 创建项目")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("mkdir my_project\ncd my_project\nnpm init -y\n")])])]),r("h3",{attrs:{id:"安装插件"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#安装插件"}},[e._v("#")]),e._v(" 安装插件")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("npm i @babel/core @babel/traverse @babel/types @babel/parser\n")])])]),r("h3",{attrs:{id:"构建脚本逻辑"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#构建脚本逻辑"}},[e._v("#")]),e._v(" 构建脚本逻辑")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('\n//babel库及文件模块导入\nconst fs = require(\'fs\');\n\n\n//babel库相关，解析，转换，构建，生产\nconst parser = require("@babel/parser");\nconst traverse = require("@babel/traverse").default;\nconst types = require("@babel/types");\nconst generator = require("@babel/generator").default;\n//读取文件\nlet encode_file = "./encode.js",decode_file = "./decode_result.js";\nif (process.argv.length > 2)\n{\n  encode_file = process.argv[2];\n}\nif (process.argv.length > 3)\n{\n  decode_file = process.argv[3];\n}\n\n\nlet jscode = fs.readFileSync(encode_file, {encoding: "utf-8"});\n//转换为ast树\nlet ast    = parser.parse(jscode);\n\n\nconst visitor =\n{\n  //TODO  write your code here！\n}\n\n\n\n\n//some function code\n\n\n//调用插件，处理源代码\ntraverse(ast,visitor);\n\n\n//生成新的js code，并保存到文件中输出\nlet {code} = generator(ast);\nfs.writeFile(\'decode.js\', code, (err)=>{});\n')])])])])}),[],!1,null,null,null);t.default=n.exports}}]);