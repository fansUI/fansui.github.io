(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{394:function(s,t,a){"use strict";a.r(t);var e=a(42),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"composer-介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#composer-介绍"}},[s._v("#")]),s._v(" Composer 介绍")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("官网：\n"),a("a",{attrs:{href:"https://getcomposer.org/",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://getcomposer.org/"),a("OutboundLink")],1)])]),s._v(" "),a("li",[a("p",[s._v("中文文档："),a("a",{attrs:{href:"https://docs.phpcomposer.com/00-intro.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://docs.phpcomposer.com/00-intro.html"),a("OutboundLink")],1)])])]),s._v(" "),a("h2",{attrs:{id:"composer-安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#composer-安装"}},[s._v("#")]),s._v(" Composer 安装")]),s._v(" "),a("h3",{attrs:{id:"使用-php-命令行安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-php-命令行安装"}},[s._v("#")]),s._v(" 使用 php 命令行安装")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 从 https://getcomposer.org/installer 链接下载到当前目录，并重命名为 composer-setup.php")]),s._v("\nphp -r "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"copy('https://getcomposer.org/installer', 'composer-setup.php');\"")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 验证composer")]),s._v("\nphp -r "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"if (hash_file('sha384', 'composer-setup.php') === '756890a4488ce9024fc62c56153228907f1545c228516cbf63f885e036d37e9a59d27d63f46af1d4d07ee0f76181c7d3') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;\"")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 执行安装")]),s._v("\nphp composer-setup.php\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除 composer-setup.php 文件")]),s._v("\nphp -r "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"unlink('composer-setup.php');\"")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 把安装的 composer.phar 移动到 /usr/local/bin/ 目录，并重命名为 composer")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("mv")]),s._v(" composer.phar /usr/local/bin/composer\n\n")])])]),a("h3",{attrs:{id:"使用-curl-安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-curl-安装"}},[s._v("#")]),s._v(" 使用 curl 安装")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 下载 composer.phar 在当前目录")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" -sS https://getcomposer.org/installer "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" php\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 上面这条命令的意思是：使用 curl -sS https://getcomposer.org/installer 命令读取 https://getcomposer.org/installer 的内容，这是一个php文件，然后通过管道符|传递给php执行，php执行installer文件会下载composer.phar文件")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 因此可以直接下载installer文件，然后使用php install命令执行，也可以得到composer.phar文件")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 把 composer.phar 移动到 /use/local/bin 目录下，并重命名为 composer")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# /use/local/bin 目录属于path路径，可以全局调用")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("mv")]),s._v(" composer.phar /usr/local/bin/composer\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# mac 查看 Path 路径")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$PATH")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 输出：/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# mac查看当前计算机用户根目录")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$HOME")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 使用的shell终端类型")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$SHELL")]),s._v("\n")])])]),a("h2",{attrs:{id:"composer-镜像"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#composer-镜像"}},[s._v("#")]),s._v(" Composer 镜像")]),s._v(" "),a("h3",{attrs:{id:"全局配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#全局配置"}},[s._v("#")]),s._v(" 全局配置")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 全局-配置阿里云 Composer 全量镜像")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("composer")]),s._v(" config -g repo.packagist "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("composer")]),s._v(" https://mirrors.aliyun.com/composer/\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 取消配置：")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("composer")]),s._v(" config -g --unset repos.packagist\n")])])]),a("h3",{attrs:{id:"项目配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#项目配置"}},[s._v("#")]),s._v(" 项目配置")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 项目级别-配置和取消")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("composer")]),s._v(" config repo.packagist "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("composer")]),s._v(" https://mirrors.aliyun.com/composer/\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 项目配置镜像后，会在composer.json文件中生成如下信息")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"repositories"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"packagist"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"type"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"composer"')]),s._v(",\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"url"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"https://mirrors.aliyun.com/composer/"')]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 取消项目配置")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("composer")]),s._v(" config --unset repos.packagist\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看配置")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("composer")]),s._v(" config --list\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看命令用法")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("composer")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("help")]),s._v(" config\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("composer")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("help")]),s._v(" create-project\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("composer")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("help")]),s._v(" require\n")])])]),a("h2",{attrs:{id:"composer-升级"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#composer-升级"}},[s._v("#")]),s._v(" composer 升级")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("composer self-update\ncomposer selfupdate\n")])])]),a("h2",{attrs:{id:"composer-使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#composer-使用"}},[s._v("#")]),s._v(" Composer 使用")]),s._v(" "),a("h3",{attrs:{id:"声明依赖关系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#声明依赖关系"}},[s._v("#")]),s._v(" 声明依赖关系")]),s._v(" "),a("p",[s._v("比方说，你正在创建一个项目，你需要一个库来做日志记录。你决定使用 monolog。为了将它添加到你的项目中，你所需要做的就是创建一个 composer.json 文件，其中描述了项目的依赖关系。")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('{\n  "require": {\n    "monolog/monolog": "1.2.*"\n  }\n}\n')])])]),a("p",[s._v("现在我们将使用 Composer 来安装项目的依赖。")]),s._v(" "),a("h3",{attrs:{id:"安装依赖包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装依赖包"}},[s._v("#")]),s._v(" 安装依赖包")]),s._v(" "),a("p",[s._v("要解决和下载依赖，请执行 install 命令：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("composer")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 此命令会读取composer.json文件中的require字段，并自动安装声明的依赖")]),s._v("\n")])])]),a("p",[s._v("执行 composer install 命令，这将会找到 monolog/monolog 的最新版本，并将它下载到 vendor 目录。 这是一个惯例把第三方的代码到一个指定的目录 vendor。如果是 monolog 将会创建 vendor/monolog/monolog 目录。")]),s._v(" "),a("p",[s._v("小技巧： 如果你正在使用Git来管理你的项目， 你可能要添加 vendor 到你的 .gitignore 文件中。 你不会希望将所有的代码都添加到你的版本库中。")]),s._v(" "),a("p",[s._v("另一件事是 install 命令将创建一个 composer.lock 文件到你项目的根目录中。")]),s._v(" "),a("h3",{attrs:{id:"使用composer-lock-锁文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用composer-lock-锁文件"}},[s._v("#")]),s._v(" 使用composer.lock - 锁文件")]),s._v(" "),a("p",[s._v("在安装依赖后，Composer 将把安装时确切的版本号列表写入composer.lock 文件。这将锁定改项目的特定版本。")]),s._v(" "),a("p",[s._v("请提交你应用程序的 composer.lock （包括 composer.json）到你的版本库中")]),s._v(" "),a("p",[s._v("这是非常重要的，因为 install 命令将会检查锁文件是否存在，如果存在，它将下载指定的版本（忽略 composer.json 文件中的定义）。")]),s._v(" "),a("p",[s._v("这意味着，任何人建立项目都将下载与指定版本完全相同的依赖。你的持续集成服务器、生产环境、你团队中的其他开发人员、每件事、每个人都使用相同的依赖，从而减轻潜在的错误对部署的影响。即使你独自开发项目，在六个月内重新安装项目时，你也可以放心的继续工作，即使从那时起你的依赖已经发布了许多新的版本。")]),s._v(" "),a("p",[s._v("如果不存在 composer.lock 文件，Composer 将读取 composer.json 并创建锁文件。")]),s._v(" "),a("p",[s._v("这意味着如果你的依赖更新了新的版本，你将不会获得任何更新。")]),s._v(" "),a("h3",{attrs:{id:"更新你的依赖版本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#更新你的依赖版本"}},[s._v("#")]),s._v(" 更新你的依赖版本")]),s._v(" "),a("p",[s._v("此时要更新你的依赖版本请使用 update 命令。这将获取最新匹配的版本（根据你的 composer.json 文件）并将新版本更新进锁文件。")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("composer update\n")])])]),a("p",[s._v("如果只想安装或更新一个依赖，你可以白名单它们：")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("php composer.phar update monolog/monolog [...]\n")])])]),a("p",[s._v("注意： 对于库，并不一定建议提交锁文件")]),s._v(" "),a("h2",{attrs:{id:"包版本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#包版本"}},[s._v("#")]),s._v(" 包版本")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[s._v("名称")]),s._v(" "),a("th",{staticStyle:{"text-align":"center"}},[s._v("实例")]),s._v(" "),a("th",{staticStyle:{"text-align":"center"}},[s._v("描述")])])]),s._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("div",{staticStyle:{width:"72pt"}},[s._v("确切的版本号")])]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("1.0.2")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("你可以指定包的确切版本")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("指定范围")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("div",{staticStyle:{width:"180pt"}},[s._v(">=1.0"),a("br"),a("br"),s._v(">=1.0,<2.0"),a("br"),a("br"),s._v(">=1.0,<1.1")])]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("通过使用比较操作符可以指定有效的版本范围。 有效的运算符：>、>=、<、<=、!=。 你可以定义多个范围，用逗号隔开，这将被视为一个逻辑AND处理。一个管道符号")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("通配符")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("1.0.*")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("你可以使用通配符*来指定一种模式。"),a("br"),a("br"),s._v("1.0.*与>=1.0,<1.1是等效的。")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[s._v("赋值运算符")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("~1.2")]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("这对于遵循语义化版本号的项目非常有用。~1.2相当于>=1.2,<2.0。想要了解更多，请阅读下一小节。")])])])]),s._v(" "),a("h2",{attrs:{id:"composer-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#composer-命令"}},[s._v("#")]),s._v(" Composer 命令")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看composer所有命令")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("composer")]),s._v(" \n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("composer")]),s._v(" list\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看 Composer 版本：")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("composer")]),s._v(" --version\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("composer")]),s._v(" -V\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 检查 Composer 是否正常")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("composer")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 升级到最新 composer")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("composer")]),s._v(" self-update\n\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 初始化项目")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("composer")]),s._v(" init\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 安装")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("composer")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 根据composer.json文件中的require字段安装对应包")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("composer")]),s._v(" require XXX "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 根据XXX名安装包")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 全局安装：安装到 ~/.composer/vendor/ 目录")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("composer")]),s._v(" global require "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"laravel/installer"')]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 更新所有依赖")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("composer")]),s._v(" update\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 更新指定的包")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("composer")]),s._v(" update monolog/monolog\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 更新指定的多个包")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("composer")]),s._v(" update monolog/monolog symfony/dependency-injection\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 还可以通过通配符匹配包")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("composer")]),s._v(" update monolog/monolog symfony/*\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 移除依赖包")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("composer")]),s._v(" remove mongodb/mongodb\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 创建laravel项目")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("composer")]),s._v(" create-project laravel/laravel --prefer-dist blog\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 创建yii2基础项目模板")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("composer")]),s._v(" create-project yiisoft/yii2-app-basic --prefer-dist blog\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 创建yii2高级项目模板")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("composer")]),s._v(" create-project yiisoft/yii2-app-advance --prefer-dist blog\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 清除缓存")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("composer")]),s._v(" cc\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("composer")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("clear")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("composer")]),s._v(" clearcache\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("composer")]),s._v(" clear-cache\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看composer所有命令")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("composer")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# search 命令搜索包")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("composer")]),s._v(" search monolog\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 列出所有已经安装的包")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("composer")]),s._v(" show\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 可以通过通配符进行筛选")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("composer")]),s._v(" show monolog/*\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 显示具体某个包的信息")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("composer")]),s._v(" show monolog/monolog\n")])])]),a("h2",{attrs:{id:"linux系统安装composer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#linux系统安装composer"}},[s._v("#")]),s._v(" linux系统安装composer")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 安装Composer")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("apt-get")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" /usr/local/bin\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" -s http://getcomposer.org/installer "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" php\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# a+x : a是所有用户，x是执行权限")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("chmod")]),s._v(" a+x composer.phar\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("alias")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("composer")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'/usr/local/bin/composer.phar'")]),s._v("\n")])])]),a("h2",{attrs:{id:"composer-自动加载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#composer-自动加载"}},[s._v("#")]),s._v(" composer 自动加载")]),s._v(" "),a("ul",[a("li",[s._v("autoload部分指定自动加载的文件夹，每次里面的文件有新增，使用composer dump-autoload即可。")])]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("# 修改 composer.json 文件的 autoload 字段后，要执行如下命令，自动生成新的自动加载配置\ncomposer dump-autoload\n")])])]),a("ul",[a("li",[s._v("composer 自动载入的四种方式")])]),s._v(" "),a("p",[s._v("对于第三方包的自动加载，Composer提供了四种方式的支持，分别是 PSR-0和PSR-4的自动加载，生成class-map，和直接包含files的方式。")]),s._v(" "),a("p",[s._v("首先引入autoload.php，在主文件 index.php 中。")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("require 'vendor/autoload.php';\n")])])]),a("h3",{attrs:{id:"psr-4-推荐"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#psr-4-推荐"}},[s._v("#")]),s._v(" PSR-4（推荐）")]),s._v(" "),a("p",[s._v("在composer.json里是这样进行配置的：")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('{\n  "autoload": {\n    "psr-4": {\n      "Foo\\\\": "src/"\n    }\n  }\n}\n')])])]),a("p",[s._v("更新自动加载，执行"),a("code",[s._v("composer dump-autoload")]),s._v("。照PSR-4的规则，当在index.php中试图"),a("code",[s._v("new Foo\\Bar\\Baz")]),s._v("这个class时，composer会自动去寻找"),a("code",[s._v("src/Bar/Baz.php")]),s._v("这个文件，如果它存在则进行加载。")]),s._v(" "),a("h3",{attrs:{id:"psr-0-不推荐"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#psr-0-不推荐"}},[s._v("#")]),s._v(" PSR-0（不推荐）")]),s._v(" "),a("p",[s._v("在composer.json里是这样进行配置的：")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('{\n  "autoload": {\n    "psr-0": {\n      "Foo\\\\": "src/"\n    }\n  }\n}\n')])])]),a("p",[s._v("更新自动加载，执行"),a("code",[s._v("composer dump-autoload")]),s._v("。注意，照PSR-0的规则，当在index.php中试图"),a("code",[s._v("new Foo\\Bar\\Baz")]),s._v("这个class时，composer会去寻找"),a("code",[s._v("src/Foo/Bar/Baz.php")]),s._v("这个文件，如果它存在则进行加载。")]),s._v(" "),a("p",[s._v('NOTE:另外注意PSR-4和PSR-0的配置里，"Foo"结尾的命名空间分隔符必须加上并且进行转义，以防出现"Foo"匹配到了"FooBar"这样的意外发生。')]),s._v(" "),a("h3",{attrs:{id:"class-map方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#class-map方式"}},[s._v("#")]),s._v(" Class-map方式")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('{\n  "autoload": {\n    "classmap": ["src/", "lib/", "Something.php"]\n  }\n}\n')])])]),a("p",[s._v("更新自动加载，执行"),a("code",[s._v("composer dump-autoload")]),s._v("。composer会扫描指定目录下以.php 或.inc 结尾的文件中的 class，生成 class 到指定 file path 的映射，并加入新生成的"),a("code",[s._v("vendor/composer/autoload_classmap.php")]),s._v("文件中。 例如src/下有一个BaseController类，那么在autoload_classmap.php文件中，就会生成这样的配置:")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("'BaseController' => $baseDir . '/src/BaseController.php'\n")])])]),a("p",[s._v("实例化类的方式这里有两种不同的情况。")]),s._v(" "),a("p",[s._v("如果加载的文件有命名空间，直接按命名空间实例化。\n如果没有命名空间，直接按类名实例化。")]),s._v(" "),a("h3",{attrs:{id:"files方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#files方式"}},[s._v("#")]),s._v(" Files方式")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('{\n  "autoload": {\n    "files": ["src/MyLibrary/functions.php"]\n  }\n}\n')])])]),a("p",[s._v("更新自动加载，执行"),a("code",[s._v("composer dump-autoload")]),s._v("。Files方式，就是手动指定供直接加载的文件。比如说我们有一系列全局的helper functions，可以放到一个helper文件里然后直接进行加载，也就是说，当你用require 'vendor/autoload.php';加载自动加载类时自动将files里的文件加载进来了，你直接使用就行了。")])])}),[],!1,null,null,null);t.default=n.exports}}]);